% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/celdaGridSearch.R
\name{celdaGridSearch}
\alias{celdaGridSearch}
\title{Run the celda Bayesian hierarchical model on a matrix of counts.}
\usage{
celdaGridSearch(counts, model, params.test, params.fixed = NULL,
  max.iter = 200, nchains = 3, cores = 1, best.only = TRUE,
  seed = 12345, verbose = TRUE, logfile.prefix = "Celda")
}
\arguments{
\item{counts}{A count matrix.}

\item{model}{Celda model. Options available in `celda::available.models`.}

\item{params.test}{List. A list denoting the combinations of parameters to run in a celda model. For example, "list(K=5:10, L=15:20)" will run all combinations of K from 5 to 10 and L from 15 to 20 in model 'celda_CG'.}

\item{params.fixed}{List. A list denoting additional parameters to use in each celda model. Default NULL.}

\item{max.iter}{Integer. Maximum number of iterations of Gibbs sampling to perform. Default 200.}

\item{nchains}{Integer. Number of random cluster initializations. Default 1.}

\item{cores}{Integer. The number of cores to use for parallel Gibbs sampling. Default 1.}

\item{best.only}{Logical. Whether to return only the chain with the highest log likelihood per combination of parameters or return all chains. Default TRUE.}

\item{seed}{Integer. Passed to set.seed(). Default 12345.}

\item{verbose}{Logical. Whether to print log messages during celda chain execution. Default TRUE.}

\item{logfile.prefix}{Character. Prefix for log files from worker threads and main process. Default "Celda".}
}
\value{
Object of class "celda_list", which contains results for all model parameter combinations and summaries of the run parameters
}
\description{
Yields assigments of genes/cells to clusters, depending on the provided model type.
}
\examples{
## Simulate a small dataset with 5 cell clusters and 10 feature modules
celda.sim = simulateCells(model="celda_CG", K=5, L=10)

## Run various combinations of parameters with 'celdaGridSearch'
celda.gs = celdaGridSearch(celda.sim$counts, model="celda_CG", params.test=list(K=4:6, L=9:11),
						  params.fixed=list(sample.label=celda.sim$sample.label), nchains=1)                              
}
